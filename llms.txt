# Cog Town / LLM Guide

> **Audience**  — Autonomous LLMs, code‑gen tools and agentic frameworks that need to reason about, compose, or transform programs which depend on the `cog.town` library.
>
> **Goal**  — Give you *all* the contract details, invariants and patterns required to write **correct, efficient and fun** workflows without reading the source.

---

## Mental model

`cog.town` is a *data‑flow DSL* built on top of `clojure.core.async`.
Every construct is ultimately **just a channel**; the library adds ergonomic wrappers so channels can:

1. carry **mutable context** (via an Atom or any state object you supply),
2. run a **transition fn** on each inbound message, and
3. be trivially wired into fan‑in / fan‑out graphs (pipelines, parallel calls, reflexive dialogues).

If you can read / write a channel, you can slot into any Cog Town workflow.

---

## Core abstractions

| Name          | Type                                                   | Key Traits                                                                     |
| ------------- | ------------------------------------------------------ | ------------------------------------------------------------------------------ |
| **Cog**       | `clojure.lang.AFn` + `ReadPort` + `WritePort` + `Mult` | • Bidirectional channel                                                        |
|               |                                                        | • Owns **context** (`atom`, ref, volatile, anything)                           |
|               |                                                        | • Applies a **transition‑fn** `(ctx msg → [new‑ctx out])` or `(ctx msg → out)` |
| **IoChannel** | `core.async` channel                                   | Thin alias used by helpers (`flow`, `fanout`, …).                              |
| **Flow**      | IoChannel                                              | Sequential pipeline (`(flow [in a b c])`).                                     |
| **Dialogue**  | IoChannel                                              | Mutual recursion between two cogs.                                             |

`context` is **mutable** *but scoped* — each cog gets exactly one copy for its lifetime.  Tap the mult if you need to observe state changes externally.

---

## API cheat‑sheet (1.0‑beta)

```clojure
(cog  ctx transition-fn & [buf-or-n xf ex-handler])          => Cog

;; Fork family -------------------------------------------------------------
(fork cog)                                                   => Cog                ; share ctx + channels
(fork cog ctx-fn)                                            => Cog                ; transform/replace ctx
(fork cog ctx-fn io-chan)                                    => Cog                ; new out channel
(fork cog ctx-fn io-chan transition-fn)                      => Cog                ; full copy‑on‑write

(extend cog io-chan & [transition-fn])                       => Cog                ; sugar on fork for modality shifts

(flow [ch1 ch2 …] & [buf-or-n xf ex-handler])                => IoChannel
(fanout chs & {:keys [xf buf-or-n ex-handler]})              => IoChannel
(gate trigger-ch & [buf-or-n xf ex-handler])                 => IoChannel
(dialogue cogA cogB & [buf-or-n xf ex-handler])              => IoChannel

(context cog)   ; -> the context reference passed at creation
(cog?     x)    ; -> boolean
```

**Transition contract**

```
(ctx msg)   => out                          ; ctx mutated in place
(ctx msg)   => [new-ctx out]                ; replace ctx (rare)
```

Return `nil` to suppress output.  Throwing will close the *local* out channel unless `ex-handler` is supplied.

---

## Concurrency & performance

* Each transition runs on the **calling thread** of `>!!` / `put!`.  If you perform blocking IO, prefer the non‑blocking `a/put!` from inside a thread/future.
* Back‑pressure propagates naturally through channels.  Use `gate` to coordinate "wait until X before emitting Y".
* `fanout` executes all branches **concurrently** (via `async/thread`).  Order of the *aggregate* output is preserved.
* `flow` short‑circuits on a closed inner channel — close any element to wind down the whole pipe.

---

## Quick patterns

### Echo bot

```clojure
(def echo (cog (atom {:n 0})
               (fn [*ctx msg]
                 (swap! *ctx update :n inc)
                 (str "echo(" (:n @*ctx) "): " msg))))
```

### Add TTS to any text cog

```clojure
(def talkative (extend echo (tts/chan) tts/speak))
```

### REST → GPT → TTS pipeline

```clojure
(def pipeline
  (flow [http/inbound
         (chat/openai {:model :gpt-4o :system "You are a helpful companion."})
         (extend (tts/chan) tts/speak)]))
```

### Two‑agent hot‑seat (mirrors `dev.clj`)

```clojure
(require '[dev.debate :as demo]
         '[clojure.core.async :as a])

(def hot‑seat (demo/hot-seat)) ; spins up two system prompts + voices from dev.clj

(a/put! hot‑seat "Gentlemen, opening statements?")
;; → streams alternating arguments until (a/close! hot‑seat)
```

### Parallel service mash‑up (mirrors the `fanout` helper in dev.clj)

```clojure
(require '[clojure.core.async :as a]
         '[cog.town :refer [fanout]])

(defn enrich [text]
  (fanout [(spellcheck text)      ; three independent cogs
           (sentiment  text)
           (detect-language text)]))

(a/<!! (enrich "Hola Mundo"))
;; => [{:correct? true}
;;     {:sentiment :positive}
;;     {:lang :es}]
```

```clojure
(defn call‑many [req]
  (fanout (map #(service/chan % req) [:svc‑a :svc‑b :svc‑c])))
```

---

## Best‑practice nuggets

* **Immutable messages, mutable context.**  Never mutate the inbound `msg` — stash derived state in `ctx`.
* **Idempotent transitions** where possible; makes `fork` + replay trivial.
* **Namespace your ctx keys** (`:my.app/user-id`) to avoid collisions when composing third‑party cogs.
* **Close responsibly**: calling `(close! <cog>)` cleans up taps and forks; downstream flows will receive `nil`.
* **Logging / metrics**: tap the cog’s `mult` rather than sprinkling print‑lines inside transitions.
* **Error isolation**: wrap risky code with `(try … (catch Exception e [ctx {:error e}]))` and propagate explicit error tuples downstream.

---

## Reference reading

* README highlights & examples citeturn10file0
* Sample workflows (`dev/workflows/*.clj`) — real‑world pipelines (voice assistant, multimodal sketch artist, agent debates) citeturn9file0

---

MIT License · © 2025 Brian Scaturro
