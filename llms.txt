# Cog Town / LLM Guide v1 · 2025‑06‑04

> **Audience** — Autonomous LLM agents, code‑generation tools, and any framework that
> needs to reason about—or generate code for—workflows built with the
> `cog.town` library.
>
> **TL;DR** — Every primitive is *just a channel*; a **Cog** bundles that
> channel with **context** and a **pure transition function** that mutates the
> context *only* by returning a **new value**.

──────────────────────────────────────────────────────────────────────────────
## 1 Mental model

           put!                                 take!
  ─────────────────────────→  [ Cog ]  ──────────────────────────→
                         ctx ─────────►  transition  ─────────►  out
                              (pure)

* **Context (`ctx`)** – any Clojure value (map, record, db reference, etc.).
* **Transition** – **pure**: `(fn [ctx msg] → [ctx' out])`
  * Runs on its own **OS thread** – safe to block on HTTP or disk I/O.
* **Result channel** – implements `ReadPort`, `WritePort`, `Channel`, **and**
  `Mult`; downstream processes can `tap` copies of every output.
* **Context visibility** – every Cog implements `IDeref`; `(@cog)` ⇒ latest
  context snapshot.

──────────────────────────────────────────────────────────────────────────────
## 2 Core API

```
(cog     ctx transition & [buf-or-n xf ex-handler])            => Cog

;; Fork & friends -----------------------------------------------------------
(fork    cog)                                                  => Cog           ; share ctx, io, transition
(fork    cog ctx-fn)                                           => Cog           ; transform/replace ctx
(fork    cog ctx-fn io)                                        => Cog           ; new IO pair
(fork    cog ctx-fn io transition-fn)                          => Cog           ; full override

(extend  cog io & [transition-fn])                             => Cog           ; thin sugar on fork

(flow    [ch1 ch2 …] & [buf-or-n xf ex-handler])               => IoChannel
(fanout  chs & {:keys [xf buf-or-n ex-handler]})               => IoChannel
(gate    trigger-ch & [buf-or-n xf ex-handler])                => IoChannel
(dialogue cogA cogB & [buf-or-n xf ex-handler])                => IoChannel

(context cog)   ;; => latest ctx   (same as @cog)
(cog?    x)     ;; => boolean
```

All helpers return a **channel‑like** value; compose them with ordinary
`core.async` operations.

──────────────────────────────────────────────────────────────────────────────
## 3 Transition contract (pure)

```
(ctx msg)  ⇒  [ctx' out]      ;; MUST return a two‑element vector
```

* `ctx'` becomes the context for the next message.
* `out` is emitted on the Cog’s **out** queue.
* If `transition` throws, its `Throwable` is wrapped and emitted as  
  `{:type ::error :throwable th :msg msg}`.

──────────────────────────────────────────────────────────────────────────────
## 4 Observing context

| Need                                       | Pattern                                                     |
|--------------------------------------------|-------------------------------------------------------------|
| Live peek / dashboard                      | `(@cog)` returns the latest context value                  |
| Structured audit or time‑travel debugging  | instrument transition functions to store state transitions|
| Remote inspection (request/response)       | Send a **query** on an auxiliary channel                   |
| Huge state that must not move through the cog | Put `{:id uuid}` in ctx, keep MBs in an external cache   |

──────────────────────────────────────────────────────────────────────────────
## 5 Concurrency & performance

* **Serial by default** – one worker thread per Cog; matches the old
  `pipeline-blocking 1` semantics.
* **Parallelism (`n>1`)** – spin up `n` worker threads that pull from the same
  `in‑chan`; merge resulting contexts via `swap!` + merge‑fn or CRDT deltas.
* **GC hints**
  * Watch `-Xlog:gc*` in dev; if Old gen grows unbounded, your roots are large.
  * Cap time‑travel timeline length to limit retained roots.
  * Lift multi‑MB blobs out of `ctx`, thread only lightweight IDs.

──────────────────────────────────────────────────────────────────────────────
## 6 Snack‑size patterns

### Echo/Shout bots

```clojure
(def echo
  (cog {}
       (fn [ctx msg]
         [(update ctx :seen (fnil inc 0))
          (str "echo: " msg)])))

(def shout
  (cogs/cog [] (fn [ctx msg]
                 (let [resp (clojure.string/upper-case msg)]
                   (-> (conj ctx msg)
                       (conj resp)
                       (vector resp))))))
```

### Pipelines via `flow`

```clojure
(def shout-flow (cogs/flow [echo shout]))
(a/put! shout-flow "hello!")
(a/take! shout-flow println)
(a/close! shout-flow)
```

### Time‑travel inspector

```clojure
(def timeline (atom []))

(defn record-wrapper [t]
  (fn [ctx msg]
    (let [[ctx' out] (t ctx msg)]
      (swap! timeline conj {:ctx ctx' :msg msg :out out})
      [ctx' out])))

(def voyager (cog {} (record-wrapper my/transition)))
;; (@voyager) gives latest ctx; @timeline holds full history.
```

──────────────────────────────────────────────────────────────────────────────
## 7 Best‑practice crib sheet

* **Pure in / pure out** – never mutate `msg`; derive and return new `ctx`. (mutable context CAN be used - i.e storing context in a db, filesystem)
* **Guard against large roots** – ref‑out blobs, cap transcript length.
* **Tap, don’t print** – instrumentation via Cog’s `Mult` keeps logic pure.
* **Idempotent = replayable** – inject RNG seed in `msg` when stochastic; keep
  `temperature=0` for deterministic tests.
* **Close upstream first** – `(close! cog)` seals both directions; downstream
  channels see `nil` and unwind.

──────────────────────────────────────────────────────────────────────────────

MIT © 2025 Brian Scaturro
